namespace Player{

  class PlayerManager{

  }

  class PlayerInput{

  }

  class PlayerLocomotor{

  }
  PlayerLocomotor -down-> PlayerInput

  class PlayerCamraControllr{
    - GameObject camera
  }
  PlayerCamraControllr -> PlayerInput

  class PlayerIdntity{

  }
  PlayerIdntity -down-|> NetworkIdentity

  class PlayerWeaponManager{
    - Weapon Weapon
    + void SetWeapon()
  }
  PlayerWeaponManager -left> PlayerInput
  PlayerWeaponManager -> PlayerStatusModel
  PlayerWeaponManager -> Weapon.WeaponAttcker
  PlayerWeaponManager -> Weapon.WeaponEffector

  class PlayerRespawner{

  }

  class PlayerHealthModel{

  }
  PlayerHealthModel -down-|> HealthModel

  class PlayerEtherModel{
    + ReactiveProperty<float> Ether
  }
  PlayerEtherModel -down-|> EtherModel

  class PlayerStatusModel{
    + float atk
  }
  class PlayerUIManager{

  }

}

namespace Weapon{
  class WeaponAttcker{
    + void SetDamage()
  }

  class WeaponEffector{

  }
}

namespace UI{

  class HealthViewModel{

  }
  HealthViewModel -down> Player.PlayerHealthModel

  class EtherViewModel{

  }
  EtherViewModel -> Player.PlayerEtherModel

  class WeaponViewModel{

  }
  class TimeViewModel{

  }
  GameManager.TimeManager -> TimeViewModel
  class TeamEtherViewModel{

  }
  class KillLogViewModel{

  }
  GameManager.KillNotifier -> KillLogViewModel

  class RespawnPointViewModel{

  }
  RespawnPointViewModel -> Player.PlayerRespawner

  class HealthViewModel{

  }

}

namespace GameManager{

  class ClientPlayersManager{

  }
  ClientPlayersManager --> Player.PlayerManager

  class KillNotifier{
    + void NoticeKill()
  }

  class TimeManager{
    + void GetCurrentTime()
  }

  class TeamEtherModel{
    + void GetEtherTeam(int teamId)
  }
  TeamEtherModel --> Player.PlayerEtherModel

  class JudgeManager{

  }

}
