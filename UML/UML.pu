namespace Player{

  class PlayerModel{
    + int id
    + ReactiveProperty<float> Health
    + ReactiveProperty<float> Ether
    + float atk
  }
  PlayerModel -|> Common.IHealth
  PlayerModel -|> Common.IEther

  class PlayerManager{
    + void Init()
  }

  class PlayerHealthManager{

  }
  PlayerHealthManager -|> Common.IDamageable


  class PlayerEtherManager{

  }
  PlayerEtherManager -|> Common.IEtherAcquirer
  PlayerEtherManager -|> Common.IEtherEmitter

  class PlayerInput{

  }

  class PlayerLocomotor{

  }
  PlayerLocomotor -> PlayerInput

  class PlayerCamraControllr{
    - GameObject camera
  }
  PlayerCamraControllr -> PlayerInput

  class PlayerWeaponManager{
    - Weapon Weapon
    + void SetWeapon()
  }
  PlayerWeaponManager -> PlayerInput
  PlayerWeaponManager -left> Weapon.WeaponAttcker
  PlayerWeaponManager -left> Weapon.WeaponEffector

  class PlayerRespawner{

  }

  class PlayerInteractor{

  }
  PlayerInteractor -> IInteractable
  PlayerInteractor -> PlayerInput
  PlayerInput -up> PlayerManager

}

namespace Weapon{
  class WeaponAttcker{
    + void SetDamage()
  }

  class WeaponEffector{

  }
}

namespace UI{

  class PlayerUIManager{

  }
  PlayerUIManager -> Player.PlayerManager

  class HealthViewModel{

  }
  HealthViewModel --> Common.IHealth

  class EtherViewModel{

  }
  EtherViewModel -> Common.IEther

  class WeaponViewModel{

  }

  class TimeViewModel{

  }
  GameManager.TimeManager -> TimeViewModel

  class TeamEtherViewModel{

  }
  class KillLogViewModel{

  }
  GameManager.KillNotifier -> KillLogViewModel

  class RespawnPointViewModel{

  }
  RespawnPointViewModel -> Player.PlayerRespawner

  class HealthViewModel{

  }

}

namespace GameManager{

  class ClientPlayersManager{

  }
  ClientPlayersManager -> Player.PlayerManager

  class KillNotifier{
    + void NoticeKill()
  }

  class TimeManager{
    + void GetCurrentTime()
  }

  class TeamEtherModel{
    + void GetEtherTeam(int teamId)
  }

  class JudgeManager{

  }

}

namespace Common{

  interface IHealth{
    + float GetHealth()
    + ReactiveProperty<float> GetHealthStream()
  }

  interface IDamageable{
    + void SetDamage(Damage damage)
    + Subject<bool> GetDeathStream()
  }

  interface IEther{
    + AcquireEther()
  }

  interface IEtherAcquirer{
    + void AcquireEther(float ether)
  }

  interface IEtherEmitter{
    + void EmitEther(float ether)
  }

  interface IInteractable{
    + void Interact(PlayerManager playerManager)
  }

  class Damage <<struct>>{

  }
}
